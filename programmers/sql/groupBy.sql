-- 고양이와 개는 몇 마리 있을까
SELECT ANIMAL_TYPE, count(ANIMAL_TYPE) AS count FROM ANIMAL_INS
GROUP BY ANIMAL_TYPE ORDER BY ANIMAL_TYPE;


-- 동명 동물 수 찾기
SELECT NAME, COUNT(NAME) AS COUNT FROM ANIMAL_INS
GROUP BY NAME
HAVING COUNT > 1
ORDER BY NAME;


-- 입양 시각 구하기(1)
SELECT DATE_FORMAT(DATETIME, '%H') AS HOUR, COUNT(DATE_FORMAT(DATETIME, '%H')) AS COUNT FROM ANIMAL_OUTS
GROUP BY HOUR
HAVING HOUR > 8 AND HOUR < 20
ORDER BY HOUR;


-- 입양 시각 구하기(2)
SET @HOUR = -1;
SELECT (@HOUR := @HOUR +1) AS HOUR ,
    (SELECT COUNT(HOUR(DATETIME)) FROM ANIMAL_OUTS 
     WHERE HOUR(DATETIME)=@HOUR) AS COUNT
FROM ANIMAL_OUTS
WHERE @HOUR < 23;


-- 카테고리 별 도서 판매량 집계하기
SELECT
    b.CATEGORY
    , SUM(SALES) AS TOTAL_SALES
FROM BOOK b
    JOIN BOOK_SALES bs
    ON b.BOOK_ID = bs.BOOK_ID
        AND bs.SALES_DATE LIKE '2022-01%'
GROUP BY b.CATEGORY
ORDER BY b.CATEGORY


-- 조건에 맞는 사용자와 총 거래금액 조회하기
SELECT
    ugu.USER_ID
    , ugu.NICKNAME
    , SUM(ugb.PRICE) AS TOTAL_SALES
FROM USED_GOODS_BOARD ugb
    JOIN USED_GOODS_USER ugu 
    ON ugb.WRITER_ID = ugu.USER_ID
WHERE ugb.STATUS = 'DONE'
GROUP BY ugb.WRITER_ID
HAVING TOTAL_SALES >= 700000
ORDER BY TOTAL_SALES


-- 즐겨찾기가 가장 많은 식당 정보 출력하기
SELECT
    r.FOOD_TYPE
    , r.REST_ID
    , r.REST_NAME
    , r.FAVORITES
FROM REST_INFO r
    JOIN (SELECT FOOD_TYPE, MAX(FAVORITES) AS FAVORITES FROM REST_INFO GROUP BY FOOD_TYPE) m
    ON r.FOOD_TYPE = m.FOOD_TYPE AND r.FAVORITES = m.FAVORITES
GROUP BY r.FOOD_TYPE
ORDER BY r.FOOD_TYPE DESC


-- 자동차 대여 기록에서 대여중 / 대여 가능 여부 구분하기
SELECT
    CAR_ID
    , MAX ( CASE
        WHEN (start_date <= '2022-10-16') AND ( end_date >= '2022-10-16') THEN '대여중'
        ELSE '대여 가능'
    END ) AS AVAILABILITY
FROM CAR_RENTAL_COMPANY_RENTAL_HISTORY 
GROUP BY CAR_ID
ORDER BY CAR_ID DESC


-- 대여 횟수가 많은 자동차들의 월별 대여 횟수 구하기
SELECT
    MONTH(START_DATE) AS MONTH
    , CAR_ID
    , COUNT(CAR_ID) AS RECORDS
FROM CAR_RENTAL_COMPANY_RENTAL_HISTORY 
WHERE CAR_ID IN (
        SELECT CAR_ID
        FROM CAR_RENTAL_COMPANY_RENTAL_HISTORY 
        WHERE START_DATE >= '2022-08-01' AND START_DATE <= '2022-10-31'
        GROUP BY CAR_ID
        HAVING COUNT(CAR_ID) >= 5
    )
    AND START_DATE >= '2022-08-01' AND START_DATE <= '2022-10-31'
GROUP BY MONTH, CAR_ID
HAVING RECORDS > 0
ORDER BY MONTH ASC, CAR_ID DESC


-- 식품분류별 가장 비싼 식품의 정보 조회하기
SELECT 
    a.CATEGORY
    ,a.MAX_PRICE
    ,fp.PRODUCT_NAME
FROM FOOD_PRODUCT fp
    JOIN (
        SELECT CATEGORY, MAX(PRICE) AS MAX_PRICE 
        FROM FOOD_PRODUCT 
        WHERE CATEGORY IN ('과자', '국', '김치', '식용유')
        GROUP BY CATEGORY
    ) a
    ON fp.PRICE = a.MAX_PRICE
        AND fp.CATEGORY = a.CATEGORY
ORDER BY a.MAX_PRICE DESC


-- 년, 월, 성별 별 상품 구매 회원 수 구하기
SELECT
    DATE_FORMAT(os.SALES_DATE, '%Y') AS YEAR
    ,DATE_FORMAT(os.SALES_DATE, '%m') AS MONTH
    ,ui.GENDER
    ,COUNT(distinct os.USER_ID) AS USERS
FROM ONLINE_SALE os
    JOIN (
        SELECT USER_ID, GENDER
        FROM USER_INFO 
        WHERE GENDER IS NOT NULL
    ) ui
    ON os.USER_ID = ui.USER_ID
GROUP BY YEAR, MONTH, GENDER
ORDER BY YEAR, MONTH, GENDER


-- 저자 별 카테고리 별 매출액 집계하기
SELECT
    b.AUTHOR_ID
    ,a.AUTHOR_NAME
    ,b.CATEGORY
    ,SUM(b.PRICE * bs.SALES) AS TOTAL_SALES
FROM BOOK b
    JOIN (
        SELECT BOOK_ID, SALES
        FROM BOOK_SALES 
        WHERE DATE_FORMAT(SALES_DATE, '%Y-%m') = '2022-01'
    ) bs
        ON b.BOOK_ID = bs.BOOK_ID
    JOIN (SELECT AUTHOR_ID, AUTHOR_NAME FROM AUTHOR) a
        ON b.AUTHOR_ID = a.AUTHOR_ID
GROUP BY b.AUTHOR_ID, b.CATEGORY
ORDER BY b.AUTHOR_ID ASC, b.CATEGORY DESC


-- 입양 시각 구하기(2)
SET @HOUR = -1;
SELECT (@HOUR := @HOUR +1) AS HOUR ,
    (SELECT COUNT(HOUR(DATETIME)) FROM ANIMAL_OUTS 
     WHERE HOUR(DATETIME)=@HOUR) AS COUNT
FROM ANIMAL_OUTS
WHERE @HOUR < 23;
